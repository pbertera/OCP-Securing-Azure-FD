apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    ingresscontroller.operator.openshift.io/owning-ingresscontroller: {{ include "router-shard.fullname" . }}
  name: router-{{ include "router-shard.fullname" . }}
  namespace: openshift-ingress
spec:
  minReadySeconds: 30
  progressDeadlineSeconds: 600
  replicas: {{ .Values.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      ingresscontroller.operator.openshift.io/deployment-ingresscontroller: {{ include "router-shard.fullname" . }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 50%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        target.workload.openshift.io/management: '{"effect": "PreferredDuringScheduling"}'
        unsupported.do-not-use.openshift.io/override-liveness-grace-period-seconds: "10"
      labels:
        ingresscontroller.operator.openshift.io/deployment-ingresscontroller: {{ include "router-shard.fullname" . }}
        ingresscontroller.operator.openshift.io/hash: 7687fcc755
    spec:
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: ingresscontroller.operator.openshift.io/deployment-ingresscontroller
                  operator: In
                  values:
                  - {{ include "router-shard.fullname" . }}
                - key: ingresscontroller.operator.openshift.io/hash
                  operator: NotIn
                  values:
                  - 7687fcc755
              topologyKey: kubernetes.io/hostname
            weight: 100
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: ingresscontroller.operator.openshift.io/deployment-ingresscontroller
                operator: In
                values:
                - {{ include "router-shard.fullname" . }}
              - key: ingresscontroller.operator.openshift.io/hash
                operator: In
                values:
                - 7687fcc755
            topologyKey: kubernetes.io/hostname
      containers:
      - env:
        - name: DEFAULT_CERTIFICATE_DIR
          value: /etc/pki/tls/private
        - name: DEFAULT_DESTINATION_CA_PATH
          value: /var/run/configmaps/service-ca/service-ca.crt
        - name: RELOAD_INTERVAL
          value: 5s
        - name: ROUTER_ALLOW_WILDCARD_ROUTES
          value: "false"
        - name: ROUTER_CANONICAL_HOSTNAME
          value: router-{{ include "router-shard.fullname" . }}.{{ .Values.ingressFQDN }}
        - name: ROUTER_CIPHERS
          value: ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        - name: ROUTER_CIPHERSUITES
          value: TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        - name: ROUTER_DISABLE_HTTP2
          value: "true"
        - name: ROUTER_DISABLE_NAMESPACE_OWNERSHIP_CHECK
          value: "false"
        - name: ROUTER_LOAD_BALANCE_ALGORITHM
          value: leastconn
        - name: ROUTER_METRICS_TLS_CERT_FILE
          value: /etc/pki/tls/metrics-certs/tls.crt
        - name: ROUTER_METRICS_TLS_KEY_FILE
          value: /etc/pki/tls/metrics-certs/tls.key
        - name: ROUTER_METRICS_TYPE
          value: haproxy
        - name: ROUTER_SERVICE_NAME
          value: sharded
        - name: ROUTER_SERVICE_NAMESPACE
          value: openshift-ingress
        - name: ROUTER_SET_FORWARDED_HEADERS
          value: append
        - name: ROUTER_TCP_BALANCE_SCHEME
          value: source
        - name: ROUTER_THREADS
          value: "4"
        - name: ROUTE_LABELS
          value: {{ .Values.routeLabels }}
        - name: SSL_MIN_VERSION
          value: TLSv1.2
        - name: STATS_PASSWORD_FILE
          value: /var/lib/haproxy/conf/metrics-auth/statsPassword
        - name: STATS_PORT
          value: "{{ .Values.metricsRouterPort }}"
        - name: ROUTER_SERVICE_HTTP_PORT
          value: "{{ .Values.httpRouterPort }}"
        - name: ROUTER_SERVICE_HTTPS_PORT
          value: "{{ .Values.httpsRouterPort }}"
        - name: STATS_USERNAME_FILE
          value: /var/lib/haproxy/conf/metrics-auth/statsUsername
        {{ if .Values.customHAProxyTemplate.useCustomTemplate -}}
        - name: TEMPLATE_FILE
          value: /var/lib/haproxy/conf/custom/{{ .Values.customHAProxyTemplate.file }}
        {{- end }}
        image: {{ .Values.image }}
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: {{ .Values.metricsRouterPort }} 
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: router
        ports:
        - containerPort: {{ .Values.httpRouterPort }}
          name: http
          protocol: TCP
        - containerPort: {{ .Values.httpsRouterPort }}
          name: https
          protocol: TCP
        - containerPort: {{ .Values.metricsRouterPort }}
          name: metrics
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz/ready
            port: {{ .Values.metricsRouterPort }} 
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: true
        startupProbe:
          failureThreshold: 120
          httpGet:
            path: /healthz/ready
            port: {{ .Values.metricsRouterPort }} 
            scheme: HTTP
          periodSeconds: 1
          successThreshold: 1
          timeoutSeconds: 1
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /etc/pki/tls/private
          name: default-certificate
          readOnly: true
        - mountPath: /var/run/configmaps/service-ca
          name: service-ca-bundle
          readOnly: true
        - mountPath: /var/lib/haproxy/conf/metrics-auth
          name: stats-auth
          readOnly: true
        - mountPath: /etc/pki/tls/metrics-certs
          name: metrics-certs
          readOnly: true
        {{ if .Values.customHAProxyTemplate.useCustomTemplate -}}
        - mountPath: /var/lib/haproxy/conf/custom
          name: template-volume
          readOnly: true
        {{- end }} 
      {{- if .Values.useHostNetwork }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      {{- else }}
      dnsPolicy: ClusterFirst
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      priorityClassName: system-cluster-critical
      restartPolicy: Always
      schedulerName: default-scheduler
      serviceAccount: router
      serviceAccountName: router
      terminationGracePeriodSeconds: 3600
      topologySpreadConstraints:
      - labelSelector:
          matchExpressions:
          - key: ingresscontroller.operator.openshift.io/hash
            operator: In
            values:
            - 7687fcc755
        maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
      volumes:
      - name: default-certificate
        secret:
          defaultMode: 420
          secretName: router-certs-{{ include "router-shard.fullname" . }}
      - configMap:
          defaultMode: 420
          items:
          - key: service-ca.crt
            path: service-ca.crt
          name: service-ca-bundle
          optional: false
        name: service-ca-bundle
      - name: stats-auth
        secret:
          defaultMode: 420
          secretName: router-stats-{{ include "router-shard.fullname" . }}
      - name: metrics-certs
        secret:
          defaultMode: 420
          secretName: router-metrics-certs-{{ include "router-shard.fullname" . }}
      {{ if .Values.customHAProxyTemplate.useCustomTemplate -}}
      - name: template-volume
        configMap:
          name: router-template
          optional: false
          defaultMode: 420
      {{-  end }}
